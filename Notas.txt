Microservicios

    1.- Es un estilo de arquitectura donde cada servicio se ejecuta de manera autónoma y se comunica entre sí.

    2.- Algunas consideraciones
        - Despliegue independiente
        - Lógica de negocio separada y sencilla
        - Cada Microservicio es autónomo y multifuncionales: Tiene base de datos, backend.
        - Reducción de tiempo de desarrollo

    3.- Si tenemos 50 microservicios no podemos manejarlo a mano:
        - Debemos utilizar despliegue e intgración contínua.

    4.- Modelo de referencia
        Configuration
        Discovery
        Load Balancing
        Circuit Braker
        Edge/Gateway Service
        Log Management
        Servidor de Seguridad(Autorización y Autenticación)
        Monitoreo

    Referencia:
    http://enmilocalfunciona.io/arquitectura-microservicios-1/
    https://channel9.msdn.com/Events/Microsoft-Spain-Events/Microservices-Architectures/Patrones-de-diseo-de-software-en-la-creacin-de-microservicios
    5.-
Docker:

docker ps
docker ps -ad
docker rm a408b2c14f37 -f

docker run --name some-nginx -d -p 8080:80 nginx:latest

docker build -t clientesa:1.0.0 .

docker tag clientes:1.0.0 mzegarra/clientesf:1.0.0
docker push mzegarra/clientesf:1.0.0

docker exec -i -t [idContainer] /bin/sh

1.- Herramientas de compilación

https://www.microsoft.com/net/download/macOS/build

3.- Crear proyecto del tipo WebApi

dotnet new webapi
dotnet new classlib -o MyWebApp.DataStore


2.- Definir Api

GET /api/clientes .- Listar todos los clientes
GET /api/clientes/{id} .- Listar un cliente
POST /api/clientes.- New cliente
PUT /api/clientes/{id}.- Update cliente
DELETE /api/clientes/{id}.- Eliminar clientes

GET /api/clientes/{id}/pedidos .- Listar pedidos
GET /api/clientes/{id}/pedidos/{id} .- Listar pedidos

POST /api/pedidos.- New pedido
DELETE /api/pedidos/{id}.- Eliminar pedido

3.- Agregar depedencia

dotnet add package log4net --version 2.0.8

4.- Compilar

dotnet build
dotnet build --configuration Release

5.- Descargar dependencias

dotnet restore

6.- Preparar el proyecto para desplegar en producción

This will make a standalone deployment.

dotnet publish -o obj/Docker/publish -c Release -r linux-x64

7.- Agregar proyecto del tipo library

dotnet new classlib
dotnet new classlib -o MyWebApp.DataStore

8.- Agregar referencia

dotnet add ./Clientes.Microservice/Clientes.Microservice.csproj reference ./Clientes.Services/Clientes.Services.csproj


9.- Test.- Pruebas unitarias y las pruebas integrales
Pruebas unitarias.- Son pruebas a métodos, pruebas puntuales y pequeñas. / Mocking
Pruebas Integrales.- También llamadas funcionales test son grandes y simulan escenarios reales entre todas las capas.


dotnet new mstest -o Clientes.ServicesTest
Agregar referencia
dotnet add reference ../Clientes.Services/Clientes.Services.csproj
==
https://www.skylinetechnologies.com/Blog/Skyline-Blog/February_2018/how-to-use-dot-net-core-cli-create-multi-project

===
